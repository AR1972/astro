.comment ******************************************************************
.comment *  Event Trapping Family - QBasic                                *
.comment ******************************************************************
.comment * 1/10/91 Cleaned up comments.
.comment *   -- JeffWe
.comment ******************************************************************
.context COM
.context @COM
:nCOM, ON COM Statements
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
COM enables, disables, or suspends event trapping on a communications port.
If event trapping is enabled, ON COM branches to a subroutine whenever
characters are received at the port.

\bCOM(n%) ON\p
\bCOM(n%) OFF\p
\bCOM(n%) STOP\p
\bON COM(n%) GOSUB line\p

    ş \bn%\p              The number of a COM (serial) port (1 or 2).
    ş \bCOM(n%) ON\p      Enables trapping of a communications event.
    ş \bCOM(n%) OFF\p     Disables communications event trapping.
    ş \bCOM(n%) STOP\p    Suspends communications event trapping. Events are
                      processed once event trapping is enabled by COM ON.
    ş \bline\p            The label or number of the first line of the
                      event-trapping subroutine.

Example:
    COM(1) ON       'Enable event trapping on port 1.
    ON COM(1) GOSUB ComHandler
    DO : LOOP WHILE INKEY$ = ""
    COM(1) OFF
    END

    ComHandler:
        PRINT "Something was typed at the terminal attached to COM1."
        RETURN

See Also    \i\p\aOPEN COM\v@opcom\v\i\p
.context .ketv
.context @ketv
:nKEY, ON KEY Statements (Event Trapping)
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
KEY enables, disables, or suspends event trapping of a key.
If event trapping is enabled, ON KEY branches to a subroutine whenever
the key is pressed.

\bKEY(n%) ON\p
\bKEY(n%) OFF\p
\bKEY(n%) STOP\p
\bON KEY(n%) GOSUB line\p

    ş \bn%\p              A value that specifies a function key, direction key,
                      or user-defined key:

                      n%        Key
                      ÍÍÍÍÍÍ    ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
                      0         All keys listed here (KEY(0) ON, KEY(0) OFF,
                                and KEY(0) STOP only).
                      1-10      Function keys F1-F10.
                      11        Up Arrow key.
                      12        Left Arrow key.
                      13        Right Arrow key.
                      14        Down Arrow key.
                      15-25     User-defined keys. For more information,
                                see \i\p\aDeclaring User-Defined Keys\v@kbflags\v\i\p.
                      30, 31    Function keys F11 and F12.

    ş \bKEY(n%) ON\p      Enables event trapping for the specified key.
    ş \bKEY(n%) OFF\p     Disables key event trapping.
    ş \bKEY(n%) STOP\p    Suspends key event trapping. Events are processed
                      once event trapping is enabled by KEY ON.
    ş \bline\p            The label or number of the first line of the
                      event-trapping subroutine.

Example:
    'This example requires Caps Lock and Num Lock to be off.
    CONST ESC = 27
    KEY 15, CHR$(&H4) + CHR$(&H1F)              'Set up Ctrl+S as KEY 15.
    ON KEY(15) GOSUB PauseHandler
    KEY(15) ON
    WHILE INKEY$ <> CHR$(ESC)
        PRINT "Press Esc to stop, Ctrl+S to pause."
        PRINT
    WEND
    END

    PauseHandler:
        SLEEP 1
        RETURN

See Also    \i\p\aKEY (Assignment)\v@KEY\v\i\p    \i\p\aDeclaring User-Defined Keys\v@kbflags\v\i\p
.context .kbflags
.context @kbflags
:nDeclaring User-Defined Keys
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
To declare a user-defined key, use the following variation of the KEY
statement:

\bKEY n%, CHR$(keyboardflag%) + CHR$(scancode%)\p

    ş \bn%\p               A value in the range 15 through 25 that identifies
                       the key.
    ş \bkeyboardflag%\p    One of the following values, or a sum of values,
                       specifying whether the user-defined key is used in
                       combination with the Shift, Ctrl, Alt, NumLock, or
                       Caps Lock keys, or with extended keys:

                       Value            Key
                       ÍÍÍÍÍÍÍÍÍÍÍÍÍ    ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
                       0                No keyboard flag
                       1 through 3      Either Shift key
                       4                Ctrl key
                       8                Alt key
                       32               NumLock key
                       64               Caps Lock key
                       128              Extended keys on a 101-key keyboard

                       To specify multiple shift states, add the values
                       together. For example, a value of 12 specifies that
                       the user-defined key is used in combination with
                       the Ctrl and Alt keys.

    ş \bscancode%\p        The scan code for the key being declared.
                       See \i\p\aKeyboard Scan Codes\v@kbsct\v\i\p.

See Also    \i\p\aKEY (Assignment)\v@KEY\v\i\p    \i\p\aKEY, ON KEY (Event Trapping)\v@ketv\v\i\p
.context PEN
.context @PEN
:nPEN, ON PEN Statements
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
PEN enables, disables, or suspends light-pen event trapping.
If event trapping is enabled, ON PEN branches to a subroutine whenever
the light pen is activated.

\bPEN ON\p
\bPEN OFF\p
\bPEN STOP\p
\bON PEN GOSUB line\p

    ş \bPEN ON\p      Enables light-pen event trapping.
    ş \bPEN OFF\p     Disables light-pen event trapping.
    ş \bPEN STOP\p    Suspends light-pen event trapping. Events are processed
                  once event trapping is enabled by PEN ON.
    ş \bline\p        The label or number of the first line of the
                  event-trapping subroutine.

Example:
    'This example requires a light pen.
    ON PEN GOSUB Handler
    PEN ON
    PRINT "Press Esc to exit."
    DO UNTIL INKEY$ = CHR$(27): LOOP
    END

Handler:
    PRINT "Pen is at row"; PEN(6); ", column"; PEN(7)
    RETURN


See Also    \i\p\aPEN Function\v@penf\v\i\p
.context .playf
.context @playf
:nPLAY Function
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Returns the number of notes in the background music queue.

\bPLAY(n)\p

    ş \bn\b    Any numeric expression.

Example:
    Music$ = "MBT180o2P2P8L8GGGL2E-P24P8L8FFFL2D"
    PLAY Music$
    WHILE PLAY(0) > 5: WEND
    PRINT "Just about done!"

See Also    \i\p\aPLAY (Music)\v@PLAY\v\i\p    \i\p\aPLAY, ON PLAY (Event Trapping)\v@playev\v\i\p
.context .playev
.context @playev
:nPLAY, ON PLAY Statements (Event Trapping)
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
PLAY enables, disables, or suspends play event trapping.
If event trapping is enabled, ON PLAY branches to a subroutine whenever
the music buffer contains fewer than a specified number of notes.

\bPLAY ON\p
\bPLAY OFF\p
\bPLAY STOP\p
\bON PLAY(queuelimit%) GOSUB line\p

    ş \bPLAY ON\p        Enables play event trapping.
    ş \bPLAY OFF\p       Disables play event trapping.
    ş \bPLAY STOP\p      Suspends play event trapping. Events are processed once
                     event trapping is enabled by PLAY ON.
    ş \bqueuelimit%\p    A number in the range 1 through 32. ON PLAY branches to
                     a subroutine when there are fewer than queuelimit%
                     notes in the music buffer.
    ş \bline\p           The label or number of the first line of the
                     event-trapping subroutine.

Example:
    ON PLAY(3) GOSUB Background
    PLAY ON
    Music$ = "MBo3L8ED+ED+Eo2Bo3DCL2o2A"
    PLAY Music$
    LOCATE 2, 1: PRINT "Press any key to stop.";
    DO WHILE INKEY$ = "": LOOP
    END

    Background:
        i% = i% + 1
        LOCATE 1, 1: PRINT "Background called "; i%; "time(s)";
        PLAY Music$
        RETURN

See Also    \i\p\aPLAY (Music)\v@PLAY\v\i\p    \i\p\aPLAY Function\v@playf\v\i\p
.context .strigf
.context @strigf
:nSTRIG Function
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Returns the status of a joystick trigger.

\bSTRIG(n%)\p

    ş \bn%\p    A value that specifies a joystick status condition:

            n%    Condition
            ÍÍ    ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
            0     Lower joystick A trigger was pressed since last STRIG(0)
            1     Lower joystick A trigger is currently pressed
            2     Lower joystick B trigger was pressed since last STRIG(2)
            3     Lower joystick B trigger is currently pressed
            4     Upper joystick A trigger was pressed since last STRIG(4)
            5     Upper joystick A trigger is currently pressed
            6     Upper joystick B trigger was pressed since last STRIG(6)
            7     Upper joystick B trigger is currently pressed

    ş STRIG returns -1 if the condition is true, 0 otherwise.

Example:
    PRINT "Press Esc to exit."
    DO
        IF STRIG(0) OR INKEY$ = CHR$(27) THEN EXIT DO
    LOOP
    DO
        BEEP                  'BEEP while trigger A is pressed.
    LOOP WHILE STRIG(1)

See Also    \i\p\aSTICK\v@STICK\v\i\p    \i\p\aSTRIG, ON STRIG Statements\v@STRIG\v\i\p
.context STRIG
.context @STRIG
:nSTRIG, ON STRIG Statements
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
STRIG enables, disables, or suspends joystick event trapping.
If event trapping is enabled, ON STRIG branches to a subroutine whenever
a specified joystick trigger is pressed.

\bSTRIG(n%) ON\p
\bSTRIG(n%) OFF\p
\bSTRIG(n%) STOP\p
\bON STRIG(n%) GOSUB line\p

    ş \bn%\p                A value that specifies a joystick trigger:

                        n%    Trigger
                        ÍÍ    ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
                        0     Lower trigger, joystick A
                        2     Lower trigger, joystick B
                        4     Upper trigger, joystick A
                        6     Upper trigger, joystick B

    ş \bSTRIG(n%) ON\p      Enables joystick event trapping.
    ş \bSTRIG(n%) OFF\p     Disables joystick event trapping.
    ş \bSTRIG(n%) STOP\p    Suspends joystick event trapping. Events are
                        processed once event trapping is enabled by STRIG ON.
    ş \bline\p              The label or number of the first line of the
                        event-trapping subroutine.

Example:
    'This example requires a joystick.
    ON STRIG(0) GOSUB Handler
    STRIG(0) ON
    PRINT "Press Esc to exit."
    DO UNTIL INKEY$ = CHR$(27): LOOP
    END

Handler:
    PRINT "Joystick trigger is depressed."
    RETURN

See Also    \i\p\aSTICK\v@STICK\v\i\p    \i\p\aSTRIG Function\v@strigf\v\i\p
.context .timerf
.context @timerf
:nTIMER Function
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Returns the number of seconds elapsed since midnight.

\bTIMER\p

    ş Use TIMER to time programs or parts of programs, or with the RANDOMIZE
      statement to seed the random-number generator.

Example:
    RANDOMIZE TIMER

See Also    \i\p\aRANDOMIZE, RND\v@randomize\v\i\p    \i\p\aTIMER, ON TIMER Statements\v@TIMER\v\i\p
.context TIMER
.context @TIMER
:nTIMER, ON TIMER Statements
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ\p
TIMER enables, disables, or suspends timer event trapping.
If event trapping is enabled, ON TIMER branches to a subroutine whenever
a specified number of seconds has elapsed.

\bTIMER ON\p
\bTIMER OFF\p
\bTIMER STOP\p
\bON TIMER(n%) GOSUB line\p

    ş \bTIMER ON\p      Enables timer event trapping.
    ş \bTIMER OFF\p     Disables timer event trapping.
    ş \bTIMER STOP\p    Suspends timer event trapping. Events are processed
                    once event trapping is enabled by TIMER ON.
    ş \bn%\p            The number of seconds that elapse before ON TIMER
                    branches to the event-trapping subroutine; a value in
                    the range 1 through 86,400 (24 hours).
    ş \bline\p          The label or number of the first line of the
                    event-trapping subroutine.

Example:
    ON TIMER(1) GOSUB TimeUpdate
    TIMER ON
    CLS
    PRINT "Time: "; TIME$
    StartTime = TIMER
    WHILE TimePast < 10
        TimePast = TIMER - StartTime
    WEND
    END

    TimeUpdate:
        LOCATE 1, 7: PRINT TIME$
        RETURN

See Also    \i\p\aTIMER Function\v@timerf\v\i\p
.comment *******************************************************************
.comment *  ON and OFF keyword screens follow.
.comment *******************************************************************
.context ON
.context @ON
:nON Keyword
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Performs different actions as part of several statements:

    ş Enables error trapping when used with the ON ERROR statement.
    ş Enables event trapping when used with the event ON statements
      (COM ON, KEY ON, PEN ON, PLAY ON, STRIG ON, and TIMER ON).
    ş Specifies an event to trap when used with the ON event statements
      (ON COM, ON KEY, ON PEN, ON PLAY, ON STRING, and ON TIMER).
    ş Specifies an expression to evaluate when used with the ON...GOSUB
      and ON...GOTO statements.

See Also    \i\p\aCOM, ON COM\v@COM\v\i\p      \i\p\aKEY, ON KEY\v@ketv\v\i\p        \i\p\aON ERROR\v@onerr\v\i\p
            \i\p\aON...GOSUB, ON...GOTO\v@ongo\v\i\p                 \i\p\aPEN, ON PEN\v@PEN\v\i\p
            \i\p\aPLAY, ON PLAY\v@playev\v\i\p    \i\p\aSTRIG, ON STRIG\v@STRIG\v\i\p    \i\p\aTIMER, ON TIMER\v@TIMER\v\i\p
.context OFF
.context @OFF
:nOFF Keyword - Different Uses
  \i\p\aContents\v@helpTableId\v\i\p  \i\p\aIndex\v@helpIndexId\v\i\p  \i\p\aBack\v!B\v\i\p
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Turns off the display of function key assignments when used with the
KEY (Assignment) statement, or disables event trapping when used with the
event OFF statements (COM OFF, KEY OFF, PEN OFF, PLAY OFF, STRIG OFF, and
TIMER OFF).

See Also    \i\p\aCOM, ON COM\v@COM\v\i\p    \i\p\aKEY, ON KEY\v@ketv\v\i\p      \i\p\aKEY (Assignment)\v@KEY\v\i\p
            \i\p\aPEN, ON PEN\v@PEN\v\i\p    \i\p\aPLAY, ON PLAY\v@playev\v\i\p    \i\p\aSTRIG, ON STRIG\v@STRIG\v\i\p
            \i\p\aTIMER, ON TIMER\v@TIMER\v\i\p
